package com.application.view;

import com.application.deviceBean.RequestDeviceBean;
import com.application.serialComm.SerialComm;
import com.application.socket.FlusherThread;
import com.application.socket.ObservationThread;
import com.application.tools.CommonTool;
import gnu.io.NoSuchPortException;
import gnu.io.PortInUseException;
import gnu.io.UnsupportedCommOperationException;
import static islegal.GetID.isLegalID;
import java.awt.Color;
import java.awt.Component;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Set;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 * 主界面
 * @author Redaddend
 */
public class MainJFram extends javax.swing.JFrame {
    
    SerialComm serialcommUSB = new SerialComm();
    public static String legalComm = null;
    private static final ObservationThread OT = new ObservationThread();
    private static FlusherThread ft = null;
    /* 用于弹出对话框 */
    private static Component rootPaneOfMain;
    
    public static final  float STATEOFVOLTAGE = 3.4f;
    /* 用于校准表格显示 */
    private static final String STANDARD_DEVICES_ONE = "2018310052";
    private static final String STANDARD_DEVICES_TWO = "2600500288";
    public static LinkedList<RequestDeviceBean> devices = new LinkedList<>();
    
    final private static DecimalFormat DECIMAL_FORMAT_VOL = new DecimalFormat(".00");
    final private static DecimalFormat DECIMAL_FORMAT_TEMP = new DecimalFormat(".0");
    final public static float THE_IDEAL_RANGE = 0.5F;
    final public static float THE_MAX_RANGE = 2.0F;
    public static int errorDevicesNumber = 0;
    private static int requestNumber = 0;
    
    public static int doneNumber = 0;
    //时间校准时间符合要求
    private static boolean timeIsReady = false;
    //标准设备符合要求
    public static boolean standardDeviceIsReady = false;
    
    private static boolean flushTable = true;
    private static boolean readyToCalibration = false;

    
    
    public static void setTimeIsReady(boolean timeIsReady) {
        MainJFram.timeIsReady = timeIsReady;
    }    

    public static boolean isFlushTable() {
        return flushTable;
    }

    public static int getRequestNumber() {
        return requestNumber;
    }
    
    public static boolean isTimeIsReady() {
        return timeIsReady;
    }

    public static boolean isStandardDeviceIsReady() {
        return standardDeviceIsReady;
    }
    
    public static DefaultTableModel dtm = null;
    
    public static Object synobj = new Object();
    /**
     * Creates new form MainJFram
     */
    public MainJFram() {
        initComponents();
    }

    public static JLabel getjLabelOfDeviceID() {
        return jLabelOfDeviceID;
    }

    public static JLabel getjLabelOfAPNVaule() {
        return jLabelOfAPNVaule;
    }

    public static Component getRootPaneOfMain() {
        return rootPaneOfMain;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPaneDeviceConfig = new javax.swing.JTabbedPane();
        jPanelDeviceFirstConfig = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaOfMessage = new javax.swing.JTextArea();
        jButtonOfCopy = new javax.swing.JButton();
        jButtonOfClear = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButtonOfConfigCommand = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabelOfSettingSituation = new javax.swing.JLabel();
        jLabelOfUSBSituation = new javax.swing.JLabel();
        jLabelOfDeviceID = new javax.swing.JLabel();
        jLabelOfAPNVaule = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jComboBoxOfDevicePort = new javax.swing.JComboBox<>();
        jRadioButtonOfDefaultSetting = new javax.swing.JRadioButton();
        jButtonOfDeviceConnect = new javax.swing.JButton();
        jRadioButtonOfOtherSetting = new javax.swing.JRadioButton();
        jTextFieldOfOtherSetting = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldNumberOfID = new javax.swing.JTextField();
        jPanelDeviceTempCalibration = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jTextFieldOfNetPort = new javax.swing.JTextField();
        jButtonOfMonitorCommand = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableOfDeviceSituation = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jTextFieldOfRunningTime = new javax.swing.JTextField();
        jTextFieldOfAskingDeviceNumber = new javax.swing.JTextField();
        jTextFieldOfOverproofDeviceNumber = new javax.swing.JTextField();
        jTextFieldOfPercentageOfOverproofDevice = new javax.swing.JTextField();
        jButtonOfCalibrationCommand = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jTextFieldOfOverproofDeviceNumberEnd = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jTextFieldOfuncalibratedDeviceNumber = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jTextFieldOfCalibratedDeviceNumber = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("199-出厂配置软件");
        setLocationByPlatform(true);
        setName("frameTopLayer"); // NOI18N
        setResizable(false);

        jTabbedPaneDeviceConfig.setToolTipText("");
        jTabbedPaneDeviceConfig.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTabbedPaneDeviceConfig.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        jTabbedPaneDeviceConfig.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPaneDeviceConfigStateChanged(evt);
            }
        });
        jTabbedPaneDeviceConfig.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTabbedPaneDeviceConfigKeyTyped(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(153, 153, 153), new java.awt.Color(0, 0, 0), new java.awt.Color(153, 153, 153)), "信息域", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("黑体", 0, 14))); // NOI18N
        jPanel2.setToolTipText("");
        jPanel2.setName(""); // NOI18N

        jTextAreaOfMessage.setEditable(false);
        jTextAreaOfMessage.setColumns(20);
        jTextAreaOfMessage.setLineWrap(true);
        jTextAreaOfMessage.setRows(5);
        jTextAreaOfMessage.setText("请选择待配置设备端口(回车键)\n");
        jTextAreaOfMessage.setToolTipText("请根据信息提示操作！(内容不可编辑)");
        jTextAreaOfMessage.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTextAreaOfMessage.setFocusable(false);
        jTextAreaOfMessage.setName(""); // NOI18N
        jScrollPane1.setViewportView(jTextAreaOfMessage);

        jButtonOfCopy.setText("复制");
        jButtonOfCopy.setToolTipText("点击复制信息域中的内容");
        jButtonOfCopy.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jButtonOfClear.setText("清空");
        jButtonOfClear.setToolTipText("清空信息域中的内容");
        jButtonOfClear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jButtonOfCopy)
                .addGap(80, 80, 80)
                .addComponent(jButtonOfClear)
                .addGap(70, 70, 70))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonOfCopy)
                    .addComponent(jButtonOfClear))
                .addGap(10, 10, 10))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(153, 153, 153), new java.awt.Color(0, 0, 0), new java.awt.Color(153, 153, 153)), "配置域", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("黑体", 0, 14))); // NOI18N
        jPanel3.setToolTipText("");
        jPanel3.setName(""); // NOI18N

        jLabel2.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("待配置ID号：");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        jButtonOfConfigCommand.setFont(new java.awt.Font("黑体", 1, 24)); // NOI18N
        jButtonOfConfigCommand.setText("确认配置");
        jButtonOfConfigCommand.setToolTipText("配置状态必须就绪才可执行");
        jButtonOfConfigCommand.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonOfConfigCommand.setEnabled(false);
        jButtonOfConfigCommand.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButtonOfConfigCommandKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jButtonOfConfigCommandKeyTyped(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED), "配置状态", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("黑体", 0, 14))); // NOI18N

        jLabel3.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("设备ID号：");
        jLabel3.setToolTipText("设备ID号配置参数");

        jLabel5.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("USB状态：");
        jLabel5.setToolTipText("记录仪连接状态");

        jLabel6.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("网络APN：");
        jLabel6.setToolTipText("网络接入点配置参数");

        jLabelOfSettingSituation.setFont(new java.awt.Font("黑体", 1, 18)); // NOI18N
        jLabelOfSettingSituation.setForeground(new java.awt.Color(255, 0, 51));
        jLabelOfSettingSituation.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelOfSettingSituation.setText("未就绪！！");
        jLabelOfSettingSituation.setToolTipText("若为'就绪',则可以进行确认配置");

        jLabelOfUSBSituation.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        jLabelOfUSBSituation.setForeground(new java.awt.Color(255, 0, 0));
        jLabelOfUSBSituation.setText("未就绪");

        jLabelOfDeviceID.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        jLabelOfDeviceID.setForeground(new java.awt.Color(255, 0, 0));
        jLabelOfDeviceID.setText("未就绪");

        jLabelOfAPNVaule.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        jLabelOfAPNVaule.setText("CMNET");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6))
                        .addGap(41, 41, 41)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelOfUSBSituation)
                            .addComponent(jLabelOfDeviceID)
                            .addComponent(jLabelOfAPNVaule)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(jLabelOfSettingSituation, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabelOfUSBSituation))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabelOfDeviceID))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabelOfAPNVaule))
                .addGap(15, 15, 15)
                .addComponent(jLabelOfSettingSituation)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel7.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("APN值：");
        jLabel7.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        jLabel8.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("设备USB端口：");
        jLabel8.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        jComboBoxOfDevicePort.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "无COM口" }));
        jComboBoxOfDevicePort.setToolTipText("请选择COM口");
        jComboBoxOfDevicePort.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jComboBoxOfDevicePort.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jComboBoxOfDevicePortFocusGained(evt);
            }
        });
        jComboBoxOfDevicePort.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jComboBoxOfDevicePortKeyTyped(evt);
            }
        });

        jRadioButtonOfDefaultSetting.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        jRadioButtonOfDefaultSetting.setSelected(true);
        jRadioButtonOfDefaultSetting.setText("CMNET");
        jRadioButtonOfDefaultSetting.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jRadioButtonOfDefaultSetting.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jRadioButtonOfDefaultSettingKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jRadioButtonOfDefaultSettingKeyTyped(evt);
            }
        });

        jButtonOfDeviceConnect.setText("连接设备");
        jButtonOfDeviceConnect.setToolTipText("请先连接配置设备并确定COM口");
        jButtonOfDeviceConnect.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonOfDeviceConnect.setEnabled(false);
        jButtonOfDeviceConnect.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jButtonOfDeviceConnectKeyTyped(evt);
            }
        });

        jRadioButtonOfOtherSetting.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jTextFieldOfOtherSetting.setEditable(false);
        jTextFieldOfOtherSetting.setColumns(8);
        jTextFieldOfOtherSetting.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        jTextFieldOfOtherSetting.setText("other");
        jTextFieldOfOtherSetting.setToolTipText("若非默认选项，请点击按钮后编辑");
        jTextFieldOfOtherSetting.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldOfOtherSettingKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldOfOtherSettingKeyTyped(evt);
            }
        });

        jLabel1.setText("(默认)");

        jTextFieldNumberOfID.setColumns(15);
        jTextFieldNumberOfID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldNumberOfIDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(145, 145, 145)
                .addComponent(jButtonOfConfigCommand, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(145, 145, 145))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(42, 42, 42))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(50, 50, 50)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jTextFieldNumberOfID, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(100, 100, 100))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBoxOfDevicePort, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(61, 61, 61)
                                        .addComponent(jLabel1)))
                                .addGap(50, 50, 50)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jRadioButtonOfOtherSetting, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextFieldOfOtherSetting)
                                        .addGap(42, 42, 42))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jButtonOfDeviceConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(45, 45, 45))))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(jRadioButtonOfDefaultSetting, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jComboBoxOfDevicePort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonOfDeviceConnect))
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldNumberOfID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jRadioButtonOfOtherSetting, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel7)
                                .addComponent(jRadioButtonOfDefaultSetting))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jTextFieldOfOtherSetting, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(50, 50, 50)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(jButtonOfConfigCommand, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70))
        );

        javax.swing.GroupLayout jPanelDeviceFirstConfigLayout = new javax.swing.GroupLayout(jPanelDeviceFirstConfig);
        jPanelDeviceFirstConfig.setLayout(jPanelDeviceFirstConfigLayout);
        jPanelDeviceFirstConfigLayout.setHorizontalGroup(
            jPanelDeviceFirstConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelDeviceFirstConfigLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanelDeviceFirstConfigLayout.setVerticalGroup(
            jPanelDeviceFirstConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDeviceFirstConfigLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanelDeviceFirstConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );

        jTabbedPaneDeviceConfig.addTab("设备出厂配置", jPanelDeviceFirstConfig);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(153, 153, 153), new java.awt.Color(0, 0, 0), new java.awt.Color(153, 153, 153)), "端口设置", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("黑体", 0, 14))); // NOI18N

        jTextFieldOfNetPort.setColumns(8);
        jTextFieldOfNetPort.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldOfNetPort.setText("1075");
        jTextFieldOfNetPort.setToolTipText("请选择所要监听的UDP端口");
        jTextFieldOfNetPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldOfNetPortActionPerformed(evt);
            }
        });
        jTextFieldOfNetPort.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldOfNetPortKeyTyped(evt);
            }
        });

        jButtonOfMonitorCommand.setText("开始监听");
        jButtonOfMonitorCommand.setToolTipText("点击后开始监听");
        jButtonOfMonitorCommand.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonOfMonitorCommand.setEnabled(false);
        jButtonOfMonitorCommand.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jButtonOfMonitorCommandKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonOfMonitorCommand, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldOfNetPort))
                .addGap(10, 10, 10))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jTextFieldOfNetPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jButtonOfMonitorCommand)
                .addGap(10, 10, 10))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(153, 153, 153), new java.awt.Color(0, 0, 0), new java.awt.Color(153, 153, 153)), "详细列表", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("黑体", 0, 14))); // NOI18N

        jScrollPane2.setAutoscrolls(true);

        jTableOfDeviceSituation.setModel(new javax.swing.table.DefaultTableModel(
            new String[devices.size()][8],
            new String [] {
                "设备ID", "最新温度值", "历史温度值1", "历史温度值2", "历史温度值3", "历史温度值4", "电池电压", "状态"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableOfDeviceSituation.setAutoscrolls(false);
        jTableOfDeviceSituation.setFocusable(false);
        jTableOfDeviceSituation.setGridColor(new java.awt.Color(0, 0, 0));
        jTableOfDeviceSituation.setIntercellSpacing(new java.awt.Dimension(2, 2));
        jTableOfDeviceSituation.getTableHeader().setResizingAllowed(false);
        jTableOfDeviceSituation.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTableOfDeviceSituation);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 657, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(153, 153, 153), new java.awt.Color(0, 0, 0), new java.awt.Color(153, 153, 153)), "统计参考", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("黑体", 0, 14))); // NOI18N

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("请求设备数量：");

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel14.setText("超标设备数量：");

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel15.setText("超标设备率：");

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel16.setText("监听时间：");

        jTextFieldOfRunningTime.setEditable(false);
        jTextFieldOfRunningTime.setColumns(12);
        jTextFieldOfRunningTime.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldOfRunningTime.setText("0时0分");
        jTextFieldOfRunningTime.setFocusable(false);

        jTextFieldOfAskingDeviceNumber.setEditable(false);
        jTextFieldOfAskingDeviceNumber.setColumns(12);
        jTextFieldOfAskingDeviceNumber.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldOfAskingDeviceNumber.setText("0");
        jTextFieldOfAskingDeviceNumber.setFocusable(false);

        jTextFieldOfOverproofDeviceNumber.setEditable(false);
        jTextFieldOfOverproofDeviceNumber.setColumns(12);
        jTextFieldOfOverproofDeviceNumber.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldOfOverproofDeviceNumber.setText("0");
        jTextFieldOfOverproofDeviceNumber.setFocusable(false);

        jTextFieldOfPercentageOfOverproofDevice.setEditable(false);
        jTextFieldOfPercentageOfOverproofDevice.setColumns(5);
        jTextFieldOfPercentageOfOverproofDevice.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldOfPercentageOfOverproofDevice.setText("0%");
        jTextFieldOfPercentageOfOverproofDevice.setFocusable(false);
        jTextFieldOfPercentageOfOverproofDevice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldOfPercentageOfOverproofDeviceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16)
                    .addComponent(jLabel13))
                .addGap(25, 25, 25)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldOfRunningTime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldOfAskingDeviceNumber, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(jLabel14))
                .addGap(25, 25, 25)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldOfOverproofDeviceNumber)
                    .addComponent(jTextFieldOfPercentageOfOverproofDevice))
                .addGap(10, 10, 10))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jTextFieldOfRunningTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(jTextFieldOfOverproofDeviceNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jLabel15)
                    .addComponent(jTextFieldOfAskingDeviceNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldOfPercentageOfOverproofDevice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );

        jButtonOfCalibrationCommand.setFont(new java.awt.Font("黑体", 1, 18)); // NOI18N
        jButtonOfCalibrationCommand.setText("校准");
        jButtonOfCalibrationCommand.setToolTipText("运行时间，超标率达到要求则可进行校准");
        jButtonOfCalibrationCommand.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonOfCalibrationCommand.setEnabled(false);
        jButtonOfCalibrationCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOfCalibrationCommandActionPerformed(evt);
            }
        });

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(153, 153, 153), new java.awt.Color(0, 0, 0), new java.awt.Color(153, 153, 153)), "校准统计", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("黑体", 0, 14))); // NOI18N

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("未校准：");

        jTextFieldOfOverproofDeviceNumberEnd.setEditable(false);
        jTextFieldOfOverproofDeviceNumberEnd.setColumns(10);
        jTextFieldOfOverproofDeviceNumberEnd.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldOfOverproofDeviceNumberEnd.setText("0");
        jTextFieldOfOverproofDeviceNumberEnd.setFocusable(false);

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("超标：");

        jTextFieldOfuncalibratedDeviceNumber.setEditable(false);
        jTextFieldOfuncalibratedDeviceNumber.setColumns(10);
        jTextFieldOfuncalibratedDeviceNumber.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldOfuncalibratedDeviceNumber.setText("0");
        jTextFieldOfuncalibratedDeviceNumber.setFocusable(false);

        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setText("已校准：");

        jTextFieldOfCalibratedDeviceNumber.setEditable(false);
        jTextFieldOfCalibratedDeviceNumber.setColumns(10);
        jTextFieldOfCalibratedDeviceNumber.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldOfCalibratedDeviceNumber.setText("0");
        jTextFieldOfCalibratedDeviceNumber.setFocusable(false);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel18)
                    .addComponent(jTextFieldOfuncalibratedDeviceNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jTextFieldOfOverproofDeviceNumberEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jTextFieldOfCalibratedDeviceNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel17)
                .addGap(18, 18, 18)
                .addComponent(jTextFieldOfuncalibratedDeviceNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel18)
                .addGap(18, 18, 18)
                .addComponent(jTextFieldOfOverproofDeviceNumberEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel19)
                .addGap(18, 18, 18)
                .addComponent(jTextFieldOfCalibratedDeviceNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanelDeviceTempCalibrationLayout = new javax.swing.GroupLayout(jPanelDeviceTempCalibration);
        jPanelDeviceTempCalibration.setLayout(jPanelDeviceTempCalibrationLayout);
        jPanelDeviceTempCalibrationLayout.setHorizontalGroup(
            jPanelDeviceTempCalibrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDeviceTempCalibrationLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanelDeviceTempCalibrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelDeviceTempCalibrationLayout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanelDeviceTempCalibrationLayout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addGroup(jPanelDeviceTempCalibrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonOfCalibrationCommand, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(10, 10, 10))
        );
        jPanelDeviceTempCalibrationLayout.setVerticalGroup(
            jPanelDeviceTempCalibrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDeviceTempCalibrationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelDeviceTempCalibrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanelDeviceTempCalibrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelDeviceTempCalibrationLayout.createSequentialGroup()
                        .addComponent(jButtonOfCalibrationCommand, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(10, 10, 10))
        );

        jTabbedPaneDeviceConfig.addTab("设备温度校准", jPanelDeviceTempCalibration);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPaneDeviceConfig)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPaneDeviceConfig)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /*
     * 版面焦点按下按键
    */
    private void jTabbedPaneDeviceConfigKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTabbedPaneDeviceConfigKeyTyped
        /*如果按下回车键*/
        if('\n' == evt.getKeyChar()) {
            /* 如果温度校准界面被激活*/
            if(jPanelDeviceTempCalibration.isShowing()) {
                /* 如果开始监听按钮未激活 */
                if(!jButtonOfMonitorCommand.isEnabled()) {
                    /*端口获得焦点*/
                    jTextFieldOfNetPort.requestFocusInWindow();
                    /*从位置0开始选中*/
                    jTextFieldOfNetPort.setSelectionStart(0);
                    /*直到结束选中*/
                    jTextFieldOfNetPort.setSelectionEnd(jTextFieldOfOtherSetting.getText().length());
                }
            /* 如果USB配置界面被激活*/
            }else if(jPanelDeviceFirstConfig.isShowing()) {
                /* 如果端口选择可选 */
                if(jComboBoxOfDevicePort.isEnabled()) {
                    /*端口选择获得焦点*/
                    jComboBoxOfDevicePort.requestFocusInWindow();
                }            
            }        
        }
    }//GEN-LAST:event_jTabbedPaneDeviceConfigKeyTyped
    /*
     * 版面切换
    */
    private void jTabbedPaneDeviceConfigStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPaneDeviceConfigStateChanged
        /* 全部复位 */
        if(!jComboBoxOfDevicePort.isEnabled()) {     
            /* 关闭串口 */
            serialcommUSB.close();
            /* 所有状态恢复 */
            jComboBoxOfDevicePort.setEnabled(true);
            jLabelOfUSBSituation.setText("未就绪");
            jLabelOfUSBSituation.setForeground(new java.awt.Color(255, 0, 0));
            jLabelOfSettingSituation.setFont(new java.awt.Font("黑体", 1, 18));
            jLabelOfSettingSituation.setForeground(new java.awt.Color(255, 0, 51));
            jLabelOfSettingSituation.setText("未就绪！！");
            jButtonOfConfigCommand.setEnabled(false);
            jTextAreaOfMessage.setText("请选择待配置设备端口\n");
            jTextFieldNumberOfID.setText("");
            jLabelOfDeviceID.setText("未就绪");
            jLabelOfDeviceID.setForeground(new java.awt.Color(255, 0, 0));
            jButtonOfDeviceConnect.setText("连接设备");
            jButtonOfDeviceConnect.setEnabled(false);
        }
    }//GEN-LAST:event_jTabbedPaneDeviceConfigStateChanged
    /*
     * 获得焦点事件
    */
    private void jComboBoxOfDevicePortFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBoxOfDevicePortFocusGained
        /*如果按键显示为‘连接设备’*/
        if("连接设备".equals(jButtonOfDeviceConnect.getText())) {
            //serialcommUSB = new SerialComm();
            if(legalComm == null) {
                /* 枚举所有可连接串口 */
                serialcommUSB.showAllPort();
                /* 获取可连接串口名字 */
                ArrayList<String> list = SerialComm.getPortNamelist();
                /* 若为空 */
                if(list.isEmpty()){
                    jTextAreaOfMessage.insert("无可用串口\n",0);
                }else{
                    /* 若不为空 */
                    jComboBoxOfDevicePort.setModel(new javax.swing.DefaultComboBoxModel<>((String[])list.toArray(new String[list.size()])));
                    /* 下拉弹出 */
                    jComboBoxOfDevicePort.setPopupVisible(true);
                    jTextAreaOfMessage.insert("请选择待配置设备的端口号(回车+上下方向键)\n",0);
                }
            }else{
                jComboBoxOfDevicePort.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{legalComm}));
                jComboBoxOfDevicePort.setPopupVisible(true);
            }
        }
    }//GEN-LAST:event_jComboBoxOfDevicePortFocusGained

    private void jComboBoxOfDevicePortKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBoxOfDevicePortKeyTyped
        if(evt.getKeyChar() == '\n'){
            /* 焦点切换至按钮处，并且将按钮设置为可操作 */
            jButtonOfDeviceConnect.setEnabled(true);
            jTextAreaOfMessage.insert("确定则点击连接设备按钮(回车键)\n",0);
            jButtonOfDeviceConnect.requestFocusInWindow();
        }
    }//GEN-LAST:event_jComboBoxOfDevicePortKeyTyped

    private void jButtonOfDeviceConnectKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButtonOfDeviceConnectKeyTyped
        if(evt.getKeyChar() == '\n') {
            /* 若按钮为可操作状态 */
            if(jButtonOfDeviceConnect.isEnabled()) {
                /* 若按钮显示为 连接设备 */
                if(SerialComm.getPortNamelist().isEmpty()) {
                    System.out.println("无此设备");
                }else{
                    if(jButtonOfDeviceConnect.getText().equals("连接设备")) {
                        try {   
                            /*打开选定连接*/
                            serialcommUSB.init(jComboBoxOfDevicePort.getSelectedItem().toString(), "Air");
                            jButtonOfDeviceConnect.setText("断开设备");
                            jLabelOfUSBSituation.setText("已经连接GPRS记录仪");
                            jLabelOfUSBSituation.setForeground(new java.awt.Color(0, 0, 0));
                            jTextAreaOfMessage.insert("已经连接USB设备，可输入配置ID\n",0);
                            jComboBoxOfDevicePort.setEnabled(false);
                            jTextFieldNumberOfID.requestFocusInWindow();
                            jTextFieldNumberOfID.setText("");
                        } catch (NoSuchPortException | PortInUseException | UnsupportedCommOperationException | IOException ex) {  
                            jTextAreaOfMessage.insert("打开USB设备时出错\n",0);     //需要更改
                            serialcommUSB.close();
                        } finally { 
                            //SerialComm.close();
                        }
                    }else{
                        /* 关闭连接 */
                        serialcommUSB.close();
                        jButtonOfDeviceConnect.setText("连接设备");
                        jLabelOfUSBSituation.setText("未就绪");
                        jTextAreaOfMessage.insert("已经断开USB设备\n",0); 
                        jLabelOfUSBSituation.setForeground(new java.awt.Color(255, 0, 0));
                        jComboBoxOfDevicePort.setEnabled(true);
                        jComboBoxOfDevicePort.requestFocusInWindow();
                    }            
                }
            }
        }
    }//GEN-LAST:event_jButtonOfDeviceConnectKeyTyped

    private void jTextFieldNumberOfIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldNumberOfIDActionPerformed
        /* 判断输入ID号是否合法 */
        if(CommonTool.checkJTextFieldNumber(jTextFieldNumberOfID)){
            if(isLegalID(jTextFieldNumberOfID.getText())){
                jTextAreaOfMessage.insert("请按需配置APN(回车确认)\n设备ID号参数设置成功！\n",0);
                jLabelOfDeviceID.setText(jTextFieldNumberOfID.getText());
                jLabelOfDeviceID.setForeground(new java.awt.Color(0, 0, 0));
                if(jRadioButtonOfDefaultSetting.isSelected()){            
                    jRadioButtonOfDefaultSetting.requestFocusInWindow();            
                }else{            
                    jRadioButtonOfOtherSetting.setSelected(true);
                    jTextFieldOfOtherSetting.setEditable(true);
                    jTextFieldOfOtherSetting.setSelectionStart(0);
                    jTextFieldOfOtherSetting.setSelectionEnd(jTextFieldOfOtherSetting.getText().length());
                    jTextFieldOfOtherSetting.requestFocusInWindow();
                }      
            }else{
                JOptionPane.showMessageDialog(rootPane, "输入非法ID号！");
                jTextFieldNumberOfID.setText("");
                jLabelOfDeviceID.setText("未就绪");
                jLabelOfDeviceID.setForeground(new java.awt.Color(255, 0, 0));
                jLabelOfSettingSituation.setFont(new java.awt.Font("黑体", 1, 18)); // NOI18N
                jLabelOfSettingSituation.setForeground(new java.awt.Color(255, 0, 51));
                jLabelOfSettingSituation.setText("未就绪！！");
                jButtonOfConfigCommand.setEnabled(false);  
            }
        }else{
            JOptionPane.showMessageDialog(rootPane, "输入非法，必须是十位纯数字！");
            jTextFieldNumberOfID.setText("");
            jLabelOfDeviceID.setText("未就绪");
            jLabelOfDeviceID.setForeground(new java.awt.Color(255, 0, 0));
            jLabelOfSettingSituation.setFont(new java.awt.Font("黑体", 1, 18)); // NOI18N
            jLabelOfSettingSituation.setForeground(new java.awt.Color(255, 0, 51));
            jLabelOfSettingSituation.setText("未就绪！！");
            jButtonOfConfigCommand.setEnabled(false);  
        }
    }//GEN-LAST:event_jTextFieldNumberOfIDActionPerformed

    private void jRadioButtonOfDefaultSettingKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jRadioButtonOfDefaultSettingKeyPressed
        /* 选择APN 左右切换 */
        if(evt.getExtendedKeyCode() == java.awt.event.KeyEvent.VK_RIGHT) {
            jRadioButtonOfDefaultSetting.setSelected(false);            
            jRadioButtonOfOtherSetting.setSelected(true);
            jTextFieldOfOtherSetting.setEditable(true);
            jTextFieldOfOtherSetting.setSelectionStart(0);
            jTextFieldOfOtherSetting.setSelectionEnd(jTextFieldOfOtherSetting.getText().length());
            jTextFieldOfOtherSetting.requestFocusInWindow();        
        }
    }//GEN-LAST:event_jRadioButtonOfDefaultSettingKeyPressed

    private void jRadioButtonOfDefaultSettingKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jRadioButtonOfDefaultSettingKeyTyped
        /* 跳转到 */
        jTextFieldOfOtherSettingKeyTyped(evt);
    }//GEN-LAST:event_jRadioButtonOfDefaultSettingKeyTyped

    private void jTextFieldOfOtherSettingKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldOfOtherSettingKeyTyped
        /* 若为回车 */
        if(evt.getKeyChar() == '\n') {
            if(jRadioButtonOfDefaultSetting.isSelected()) {
                jLabelOfAPNVaule.setText(jRadioButtonOfDefaultSetting.getText());
            }else{
                jLabelOfAPNVaule.setText(jTextFieldOfOtherSetting.getText());
            }
            refreshSituation();
        }
    }//GEN-LAST:event_jTextFieldOfOtherSettingKeyTyped
    /* 刷新框内容 */
    private void refreshSituation(){
        if(jLabelOfDeviceID.getText().equals("未就绪")) {
            jTextAreaOfMessage.insert("待配置ID号未获取\n",0);
            jLabelOfSettingSituation.setFont(new java.awt.Font("黑体", 1, 18)); // NOI18N
            jLabelOfSettingSituation.setForeground(new java.awt.Color(255, 0, 51));
            jLabelOfSettingSituation.setText("未就绪！！");
            jButtonOfConfigCommand.setEnabled(false);
        }else if(!"已经连接GPRS记录仪".equals(jLabelOfUSBSituation.getText())){
            jTextAreaOfMessage.insert("待配置设备未成功连接\n",0);
            jLabelOfSettingSituation.setFont(new java.awt.Font("黑体", 1, 18)); // NOI18N
            jLabelOfSettingSituation.setForeground(new java.awt.Color(255, 0, 51));
            jLabelOfSettingSituation.setText("未就绪！！");
            jButtonOfConfigCommand.setEnabled(false);
        }else if(jLabelOfAPNVaule.getText().isEmpty()){
            jTextAreaOfMessage.insert("APN不能为空\n",0);
            jLabelOfSettingSituation.setFont(new java.awt.Font("黑体", 1, 18)); // NOI18N
            jLabelOfSettingSituation.setForeground(new java.awt.Color(255, 0, 51));
            jLabelOfSettingSituation.setText("未就绪！！");
            jButtonOfConfigCommand.setEnabled(false); 
        }else{
            jLabelOfSettingSituation.setText("请确认配置信息");
            jLabelOfSettingSituation.setForeground(new java.awt.Color(0, 0, 0));
            jButtonOfConfigCommand.setEnabled(true);
            jButtonOfConfigCommand.requestFocusInWindow();
        } 
    }
    private void jTextFieldOfOtherSettingKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldOfOtherSettingKeyPressed
        /* 选择APN 左右切换 */
        if(evt.getExtendedKeyCode() == java.awt.event.KeyEvent.VK_LEFT) { 
            jRadioButtonOfOtherSetting.setSelected(false);
            jRadioButtonOfDefaultSetting.setSelected(true);
            jTextFieldOfOtherSetting.setEditable(false);
            jRadioButtonOfDefaultSetting.requestFocusInWindow();        
        }
    }//GEN-LAST:event_jTextFieldOfOtherSettingKeyPressed

    private void jButtonOfConfigCommandKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButtonOfConfigCommandKeyTyped
        if(evt.getKeyChar() == '\n') {
            try {
                legalComm = null;
                serialcommUSB.start();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButtonOfConfigCommandKeyTyped

    private void jButtonOfConfigCommandKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButtonOfConfigCommandKeyPressed
        if(evt.getExtendedKeyCode() == java.awt.event.KeyEvent.VK_UP) {            
            jButtonOfDeviceConnect.requestFocusInWindow();
            jTextAreaOfMessage.setText("");        
        }
    }//GEN-LAST:event_jButtonOfConfigCommandKeyPressed

    private void jTextFieldOfNetPortKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldOfNetPortKeyTyped
        if(evt.getKeyChar() == '\n'){        
            if(Integer.parseInt(jTextFieldOfNetPort.getText().trim()) < 1024 || Integer.parseInt(jTextFieldOfNetPort.getText().trim()) > 65535) {            
                JOptionPane.showMessageDialog(rootPane, "输入范围1024-65535");
                evt.setKeyChar('\0');            
            }else{            
                jButtonOfMonitorCommand.setEnabled(true);
                jButtonOfMonitorCommand.requestFocusInWindow();               
            }        
        }else if(!(evt.getKeyChar() >='0' && evt.getKeyChar() <='9'|| evt.getKeyChar() == 0x08)){        
            JOptionPane.showMessageDialog(rootPane, "输入必须是数字！");
            evt.setKeyChar('\0');        
        }
    }//GEN-LAST:event_jTextFieldOfNetPortKeyTyped

    private void jButtonOfMonitorCommandKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButtonOfMonitorCommandKeyTyped
        if(evt.getKeyChar() == '\n'){
            if(jButtonOfMonitorCommand.getText().equals("开始监听")){
                new Thread(OT).start();
                ft = new FlusherThread();
                new Thread(ft).start();
                showList(devices);
                jTabbedPaneDeviceConfig.setEnabled(false);
                try{
                    Thread.sleep(1000);
                }catch(InterruptedException e){
                }
            }else{
                if(ft != null){
                    ft.close();
                    ft = null;
                }
                OT.close();
                jTabbedPaneDeviceConfig.setEnabled(true);
                jTextFieldOfNetPort.requestFocusInWindow();
                /*从位置0开始选中*/
                jTextFieldOfNetPort.setSelectionStart(0);
                /*直到结束选中*/
                jTextFieldOfNetPort.setSelectionEnd(jTextFieldOfOtherSetting.getText().length());
            }
        }
    }//GEN-LAST:event_jButtonOfMonitorCommandKeyTyped

    private void jTextFieldOfNetPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldOfNetPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldOfNetPortActionPerformed

    private void jTextFieldOfPercentageOfOverproofDeviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldOfPercentageOfOverproofDeviceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldOfPercentageOfOverproofDeviceActionPerformed

    private void jButtonOfCalibrationCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOfCalibrationCommandActionPerformed
        //按键按下判断是否可操作
        if(jButtonOfCalibrationCommand.isEnabled()) {
            flushTable = false;
            //设置未校准数量
            requestNumber = devices.size() - errorDevicesNumber;
            jTextFieldOfuncalibratedDeviceNumber.setText(String.valueOf(requestNumber - 2));
            jTextFieldOfOverproofDeviceNumberEnd.setText(String.valueOf(errorDevicesNumber));            
        }
    }//GEN-LAST:event_jButtonOfCalibrationCommandActionPerformed

    private static class MTableCellRenderer extends DefaultTableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table,
                Object value, boolean isSelected, boolean hasFocus, int row,
                int column) {
            Component c = super.getTableCellRendererComponent(table, value,
                    isSelected, hasFocus, row, column);
            setForeground(Color.darkGray);
            setHorizontalAlignment(JLabel.CENTER);
            if ((row == 0)||(row == 1)) {
                setBackground(new java.awt.Color(207,233,205));
            }else{
                if(column == 7){
                    if((value != null)&&(value instanceof String)){
                        switch ((String)value) {
                            case "outOfRange":
                                setBackground(new java.awt.Color(241,181,181));
                                break;
                            case "lowBattery":
                                setBackground(new java.awt.Color(230,229,229));
                                break;
                            default:
                                setBackground(Color.WHITE);
                                break;
                        }
                    }else{
                        setBackground(Color.WHITE);
                    }
                }else{
                    setBackground(Color.WHITE);
                }
            }
            return c;
        }
    }
    
    public static synchronized void showList(LinkedList<RequestDeviceBean> devices){
        /* 若出现一台新的设备 */
        if(jTableOfDeviceSituation.getModel().getRowCount() < devices.size()){
            dtm = new DefaultTableModel(
                new String[devices.size()][8],
                new String [] {
                    "设备ID", "最新温度值", "历史温度值1", "历史温度值2", "历史温度值3", "历史温度值4", "电池电压", "状态"
                }
            ) {
                Class[] types = new Class [] {
                    java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
                };
                boolean[] canEdit = new boolean [] {
                    false, false, false, false, false, false, false, false
                };

                @Override
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }

                @Override
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            };
            jTableOfDeviceSituation.setModel(dtm);
        }
        /* 显示 */
        for(int i = 0;i < devices.size();i++) {
            jTableOfDeviceSituation.getModel().setValueAt(devices.get(i).getDeviceID(), i, 0);
            Float temp;
            for(int j = 0;j < 5;j++){
                temp = devices.get(i).getTempLinkedList().get(j);
                if(temp != null){
                    DECIMAL_FORMAT_TEMP.format(temp);
                }
                jTableOfDeviceSituation.getModel().setValueAt(temp, i, j + 1);
            }
            jTableOfDeviceSituation.getModel().setValueAt(DECIMAL_FORMAT_VOL.format(devices.get(i).getVoltage()), i, 6);
            jTableOfDeviceSituation.getModel().setValueAt(devices.get(i).getMessage(), i, 7);
        }
        /* 调整缩进 */
        CommonTool.FitTableColumns(jTableOfDeviceSituation);
        
        jTextFieldOfAskingDeviceNumber.setText(String.valueOf(devices.size() - 2));
        jTextFieldOfOverproofDeviceNumber.setText(String.valueOf(errorDevicesNumber));
        if((devices.size() - 2)>0){
            jTextFieldOfPercentageOfOverproofDevice.setText(String.valueOf((int)((float)errorDevicesNumber/(float)(devices.size() - 2)*100)) + '%');
        }else{
            jTextFieldOfPercentageOfOverproofDevice.setText("0%");
        }
        //判断是否可以校准
//            jTableOfDeviceSituation.getColumnModel().getColumn(i).setCellRenderer(new MTableCellRenderer());
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            ex.printStackTrace();
        }
        //</editor-fold>
        RequestDeviceBean rdb = new RequestDeviceBean();
        rdb.setDeviceID(STANDARD_DEVICES_ONE);
        rdb.insertNewTemp(null);
        rdb.insertNewTemp(null);
        rdb.insertNewTemp(null);
        rdb.insertNewTemp(null);
        rdb.insertNewTemp(null);
        devices.add(rdb);
        rdb = new RequestDeviceBean();
        rdb.insertNewTemp(null);
        rdb.insertNewTemp(null);
        rdb.insertNewTemp(null);
        rdb.insertNewTemp(null);
        rdb.insertNewTemp(null);
        rdb.setDeviceID(STANDARD_DEVICES_TWO);
        devices.add(rdb);
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainJFram().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton jButtonOfCalibrationCommand;
    private javax.swing.JButton jButtonOfClear;
    public static javax.swing.JButton jButtonOfConfigCommand;
    private javax.swing.JButton jButtonOfCopy;
    private static javax.swing.JButton jButtonOfDeviceConnect;
    public static javax.swing.JButton jButtonOfMonitorCommand;
    public static javax.swing.JComboBox<String> jComboBoxOfDevicePort;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private static javax.swing.JLabel jLabelOfAPNVaule;
    private static javax.swing.JLabel jLabelOfDeviceID;
    private static javax.swing.JLabel jLabelOfSettingSituation;
    private static javax.swing.JLabel jLabelOfUSBSituation;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanelDeviceFirstConfig;
    private javax.swing.JPanel jPanelDeviceTempCalibration;
    private javax.swing.JRadioButton jRadioButtonOfDefaultSetting;
    private javax.swing.JRadioButton jRadioButtonOfOtherSetting;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPaneDeviceConfig;
    public static javax.swing.JTable jTableOfDeviceSituation;
    public static javax.swing.JTextArea jTextAreaOfMessage;
    private static javax.swing.JTextField jTextFieldNumberOfID;
    public static javax.swing.JTextField jTextFieldOfAskingDeviceNumber;
    public static javax.swing.JTextField jTextFieldOfCalibratedDeviceNumber;
    public static javax.swing.JTextField jTextFieldOfNetPort;
    private javax.swing.JTextField jTextFieldOfOtherSetting;
    public static javax.swing.JTextField jTextFieldOfOverproofDeviceNumber;
    private javax.swing.JTextField jTextFieldOfOverproofDeviceNumberEnd;
    public static javax.swing.JTextField jTextFieldOfPercentageOfOverproofDevice;
    public static javax.swing.JTextField jTextFieldOfRunningTime;
    public static javax.swing.JTextField jTextFieldOfuncalibratedDeviceNumber;
    // End of variables declaration//GEN-END:variables
}
